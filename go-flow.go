package main

import (
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"text/template"

	"github.com/gogap/builder"
	"github.com/gogap/config"
	"github.com/urfave/cli"
)

const (
	flowTempl = "cGFja2FnZSBtYWluCgppbXBvcnQgKAoJImJ5dGVzIgoJImVuY29kaW5nL2pzb24iCgkiZm10IgoJImlvL2lvdXRpbCIKCSJvcyIKCSJzdHJpbmdzIgoKCSJnaXRodWIuY29tL2dvZ2FwL2NvbmZpZyIKCSJnaXRodWIuY29tL2dvZ2FwL2NvbnRleHQiCgkiZ2l0aHViLmNvbS9nb2dhcC9mbG93IgoJImdpdGh1Yi5jb20vZ29nYXAvbG9ncnVzX21hdGUiCgkiZ2l0aHViLmNvbS9zaXJ1cHNlbi9sb2dydXMiCgkiZ2l0aHViLmNvbS91cmZhdmUvY2xpIgopCgp2YXIgKAoJY29uZmlnU3RyID0ge3suY29uZmlnX3N0cn19CikKCmZ1bmMgbWFpbigpIHsKCgljb25mIDo9IGNvbmZpZy5OZXdDb25maWcoCgkJY29uZmlnLkNvbmZpZ1N0cmluZyhjb25maWdTdHIpLAoJKQoKCWFwcENvbmYgOj0gY29uZi5HZXRDb25maWcoImFwcCIpCgoJYXBwIDo9IGNsaS5OZXdBcHAoKQoKCWFwcC5WZXJzaW9uID0gYXBwQ29uZi5HZXRTdHJpbmcoInZlcnNpb24iLCAiMC4wLjAiKQoJYXBwLkF1dGhvciA9IGFwcENvbmYuR2V0U3RyaW5nKCJhdXRob3IiKQoJYXBwLk5hbWUgPSBhcHBDb25mLkdldFN0cmluZygibmFtZSIsICJhcHAiKQoJYXBwLlVzYWdlID0gYXBwQ29uZi5HZXRTdHJpbmcoInVzYWdlIikKCWFwcC5IZWxwTmFtZSA9IGFwcC5OYW1lCgoJaWYgYXBwLlZlcnNpb24gPT0gIjAuMC4wIiB7CgkJYXBwLkhpZGVWZXJzaW9uID0gdHJ1ZQoJfQoKCWNvbW1hbmRzQ29uZiA6PSBhcHBDb25mLkdldENvbmZpZygiY29tbWFuZHMiKQoKCWZvciBfLCBrZXkgOj0gcmFuZ2UgY29tbWFuZHNDb25mLktleXMoKSB7CgkJZ2VuZXJhdGVDb21tYW5kcygmYXBwLkNvbW1hbmRzLCBrZXksIGNvbW1hbmRzQ29uZi5HZXRDb25maWcoa2V5KSkKCX0KCglhcHAuUnVuQW5kRXhpdE9uRXJyb3IoKQoKCXJldHVybgp9CgpmdW5jIG5ld0FjdGlvbihuYW1lIHN0cmluZywgY29uZiBjb25maWcuQ29uZmlndXJhdGlvbikgY2xpLkFjdGlvbkZ1bmMgewoKCXJldHVybiBmdW5jKGN0eCAqY2xpLkNvbnRleHQpIChlcnIgZXJyb3IpIHsKCgkJZXJyID0gbG9hZEVOVihjdHgpCgoJCWlmIGVyciAhPSBuaWwgewoJCQlyZXR1cm4KCQl9CgoJCWRpc2FibGVTdGVwcyA6PSBjdHguU3RyaW5nU2xpY2UoImRpc2FibGUiKQoJCWNvbmZpZ0ZpbGVzIDo9IGN0eC5TdHJpbmdTbGljZSgiY29uZmlnIikKCgkJZGVmYXVsdENvbmYgOj0gY29uZi5HZXRDb25maWcoImRlZmF1bHQtY29uZmlnIikKCgkJbWFwQ29uZmlncyA6PSBtYXBbc3RyaW5nXWNvbmZpZy5Db25maWd1cmF0aW9uewoJCQkiZGVmYXVsdC1jb25maWciOiBkZWZhdWx0Q29uZiwKCQl9CgoJCWZvciBfLCBjb25maWdBcmcgOj0gcmFuZ2UgY29uZmlnRmlsZXMgewoJCQl2IDo9IHN0cmluZ3MuU3BsaXROKGNvbmZpZ0FyZywgIjoiLCAyKQoJCQlpZiBsZW4odikgPT0gMSB7CgkJCQlhcmdzQ29uZmlnIDo9IGNvbmZpZy5OZXdDb25maWcoY29uZmlnLkNvbmZpZ0ZpbGUodlswXSkpCgkJCQltYXBDb25maWdzWyJkZWZhdWx0LWNvbmZpZyJdID0gYXJnc0NvbmZpZwoJCQl9IGVsc2UgaWYgbGVuKHYpID09IDIgewoJCQkJYXJnc0NvbmZpZyA6PSBjb25maWcuTmV3Q29uZmlnKGNvbmZpZy5Db25maWdGaWxlKHZbMV0pKQoJCQkJbWFwQ29uZmlnc1t2WzBdXSA9IGFyZ3NDb25maWcKCQkJfQoJCX0KCgkJZGVmYXVsdENvbmYgPSBtYXBDb25maWdzWyJkZWZhdWx0LWNvbmZpZyJdCgoJCWxvZ2dlckNvbmYgOj0gZGVmYXVsdENvbmYuR2V0Q29uZmlnKCJsb2dnZXIiKQoKCQlsb2dydXNfbWF0ZS5IaWphY2soCgkJCWxvZ3J1cy5TdGFuZGFyZExvZ2dlcigpLAoJCQlsb2dydXNfbWF0ZS5XaXRoQ29uZmlnKGxvZ2dlckNvbmYpLAoJCSkKCgkJZmxvd0N0eCA6PSBjb250ZXh0Lk5ld0NvbnRleHQoKQoKCQljdHhMaXN0IDo9IGN0eC5TdHJpbmdTbGljZSgiY3R4IikKCQljdHhGaWxlcyA6PSBjdHguU3RyaW5nU2xpY2UoImN0eC1maWxlIikKCgkJbG9hZENvbnRleHQoY3R4TGlzdCwgY3R4RmlsZXMsIGZsb3dDdHgpCgoJCXRyYW5zIDo9IGZsb3cuQmVnaW4oZmxvd0N0eCwgY29uZmlnLldpdGhDb25maWcoZGVmYXVsdENvbmYpKQoKCQlmbG93TGlzdCA6PSBjb25mLkdldFN0cmluZ0xpc3QoImZsb3ciKQoKCQlmbG93SXRlbUNvbmZpZyA6PSBjb25mLkdldENvbmZpZygiY29uZmlnIikKCgkJbWFwRGlzYWJlbFN0ZXBzIDo9IG1hcFtzdHJpbmddYm9vbHt9CgoJCWZvciBfLCBzdGVwIDo9IHJhbmdlIGRpc2FibGVTdGVwcyB7CgkJCW1hcERpc2FiZWxTdGVwc1tzdGVwXSA9IHRydWUKCQl9CgoJCWZvciBfLCBpdGVtIDo9IHJhbmdlIGZsb3dMaXN0IHsKCgkJCWhhbmRsZXJBbmRDb25mIDo9IHN0cmluZ3MuU3BsaXROKGl0ZW0sICJAIiwgMikKCgkJCW5hbWUgOj0gIiIKCQkJY29uZmlnTmFtZSA6PSAiIgoKCQkJaWYgbGVuKGhhbmRsZXJBbmRDb25mKSA9PSAyIHsKCQkJCW5hbWUgPSBoYW5kbGVyQW5kQ29uZlswXQoJCQkJY29uZmlnTmFtZSA9IGhhbmRsZXJBbmRDb25mWzFdCgkJCX0gZWxzZSB7CgkJCQluYW1lID0gaGFuZGxlckFuZENvbmZbMF0KCQkJfQoKCQkJaWYgbWFwRGlzYWJlbFN0ZXBzW2l0ZW1dIHsKCQkJCWNvbnRpbnVlCgkJCX0KCgkJCWlmIGxlbihjb25maWdOYW1lKSA+IDAgewoJCQkJaGFuZGxlckNvbmYgOj0gZmxvd0l0ZW1Db25maWcuR2V0Q29uZmlnKGNvbmZpZ05hbWUpCgoJCQkJaWYgaENvbmYsIGV4aXN0IDo9IG1hcENvbmZpZ3NbY29uZmlnTmFtZV07IGV4aXN0IHsKCQkJCQloYW5kbGVyQ29uZiA9IGhDb25mCgkJCQl9CgoJCQkJdHJhbnMuVGhlbihuYW1lLCBjb25maWcuV2l0aENvbmZpZyhoYW5kbGVyQ29uZikpCgkJCX0gZWxzZSB7CgkJCQl0cmFucy5UaGVuKG5hbWUpCgkJCX0KCQl9CgoJCWVyciA9IHRyYW5zLkNvbW1pdCgpCgoJCWlmIGVyciAhPSBuaWwgewoJCQlyZXR1cm4KCQl9CgoJCXF1aWV0IDo9IGN0eC5Cb29sKCJxdWlldCIpCgkJb3V0cHV0IDo9IGN0eC5TdHJpbmcoIm91dHB1dCIpCgoJCWlmICFxdWlldCB8fCBsZW4ob3V0cHV0KSA+IDAgewoKCQkJbmFtZVZhbHVlcyA6PSB0cmFucy5PdXRwdXQoKQoKCQkJdmFyIG91dGRhdGEgW11ieXRlCgkJCW91dGRhdGEsIGVyciA9IGpzb24uTWFyc2hhbEluZGVudCgKCQkJCXN0cnVjdCB7CgkJCQkJT3V0cHV0IFtdZmxvdy5OYW1lVmFsdWUgYGpzb246Im91dHB1dCJgCgkJCQl9e25hbWVWYWx1ZXN9LAoJCQkJIiIsCgkJCQkiICAgICIpCgoJCQlpZiBlcnIgIT0gbmlsIHsKCQkJCXJldHVybgoJCQl9CgoJCQlpZiBsZW4ob3V0cHV0KSA9PSAwIHsKCQkJCWlmIGxlbihuYW1lVmFsdWVzKSA+IDAgewoJCQkJCWZtdC5QcmludGxuKHN0cmluZyhvdXRkYXRhKSkKCQkJCX0KCQkJfSBlbHNlIHsKCQkJCWVyciA9IGlvdXRpbC5Xcml0ZUZpbGUob3V0cHV0LCBvdXRkYXRhLCAwNjQ0KQoJCQkJaWYgZXJyICE9IG5pbCB7CgkJCQkJcmV0dXJuCgkJCQl9CgkJCX0KCQl9CgoJCXJldHVybgoJfQp9CgpmdW5jIGxvYWRFTlYoY3R4ICpjbGkuQ29udGV4dCkgKGVyciBlcnJvcikgewoJZW52cyA6PSBjdHguU3RyaW5nU2xpY2UoImVudiIpCgllbnZGaWxlcyA6PSBjdHguU3RyaW5nU2xpY2UoImVudi1maWxlIikKCglpZiBsZW4oZW52cykgPT0gMCAmJiBsZW4oZW52RmlsZXMpID09IDAgewoJCXJldHVybgoJfQoKCW1hcEVOViA6PSBtYXBbc3RyaW5nXXN0cmluZ3t9CgoJZm9yIF8sIGVudiA6PSByYW5nZSBlbnZzIHsKCQl2IDo9IHN0cmluZ3MuU3BsaXROKGVudiwgIjoiLCAyKQoJCWlmIGxlbih2KSAhPSAyIHsKCQkJZXJyID0gZm10LkVycm9yZigiZW52IGZvcm1hdCBlcnJvcjolcyIsIGVudikKCQkJcmV0dXJuCgkJfQoKCQltYXBFTlZbdlswXV0gPSB2WzFdCgl9CgoJZm9yIF8sIGYgOj0gcmFuZ2UgZW52RmlsZXMgewoKCQl2YXIgZGF0YSBbXWJ5dGUKCQlkYXRhLCBlcnIgPSBpb3V0aWwuUmVhZEZpbGUoZikKCQlpZiBlcnIgIT0gbmlsIHsKCQkJcmV0dXJuCgkJfQoKCQlidWYgOj0gYnl0ZXMuTmV3QnVmZmVyKGRhdGEpCgkJZGVjb2RlciA6PSBqc29uLk5ld0RlY29kZXIoYnVmKQoJCWRlY29kZXIuVXNlTnVtYmVyKCkKCgkJdG1wTWFwIDo9IG1hcFtzdHJpbmddc3RyaW5ne30KCQllcnIgPSBkZWNvZGVyLkRlY29kZSgmdG1wTWFwKQoJCWlmIGVyciAhPSBuaWwgewoJCQlyZXR1cm4KCQl9CgoJCWZvciBrLCB2IDo9IHJhbmdlIHRtcE1hcCB7CgkJCW1hcEVOVltrXSA9IHYKCQl9Cgl9CgoJZm9yIGssIHYgOj0gcmFuZ2UgbWFwRU5WIHsKCQlvcy5TZXRlbnYoaywgdikKCX0KCglyZXR1cm4KfQoKZnVuYyBsb2FkQ29udGV4dChjdHhMaXN0IFtdc3RyaW5nLCBjdHhGaWxlcyBbXXN0cmluZywgZmxvd0N0eCBjb250ZXh0LkNvbnRleHQpIChlcnIgZXJyb3IpIHsKCglpZiBsZW4oY3R4TGlzdCkgPT0gMCAmJiBsZW4oY3R4RmlsZXMpID09IDAgewoJCXJldHVybgoJfQoKCW1hcEN0eCA6PSBtYXBbc3RyaW5nXXN0cmluZ3t9CgoJZm9yIF8sIGMgOj0gcmFuZ2UgY3R4TGlzdCB7CgkJdiA6PSBzdHJpbmdzLlNwbGl0TihjLCAiOiIsIDIpCgkJaWYgbGVuKHYpICE9IDIgewoJCQllcnIgPSBmbXQuRXJyb3JmKCJjdHggZm9ybWF0IGVycm9yOiVzIiwgYykKCQkJcmV0dXJuCgkJfQoKCQltYXBDdHhbdlswXV0gPSB2WzFdCgl9CgoJZm9yIF8sIGYgOj0gcmFuZ2UgY3R4RmlsZXMgewoKCQl2YXIgZGF0YSBbXWJ5dGUKCQlkYXRhLCBlcnIgPSBpb3V0aWwuUmVhZEZpbGUoZikKCQlpZiBlcnIgIT0gbmlsIHsKCQkJcmV0dXJuCgkJfQoKCQlidWYgOj0gYnl0ZXMuTmV3QnVmZmVyKGRhdGEpCgkJZGVjb2RlciA6PSBqc29uLk5ld0RlY29kZXIoYnVmKQoJCWRlY29kZXIuVXNlTnVtYmVyKCkKCgkJdG1wTWFwIDo9IG1hcFtzdHJpbmddc3RyaW5ne30KCQllcnIgPSBkZWNvZGVyLkRlY29kZSgmdG1wTWFwKQoJCWlmIGVyciAhPSBuaWwgewoJCQlyZXR1cm4KCQl9CgoJCWZvciBrLCB2IDo9IHJhbmdlIHRtcE1hcCB7CgkJCW1hcEN0eFtrXSA9IHYKCQl9Cgl9CgoJZm9yIGssIHYgOj0gcmFuZ2UgbWFwQ3R4IHsKCQlmbG93Q3R4LldpdGhWYWx1ZShrLCB2KQoJfQoKCXJldHVybgp9CgpmdW5jIGdlbmVyYXRlQ29tbWFuZHMoY21kcyAqW11jbGkuQ29tbWFuZCwgbmFtZSBzdHJpbmcsIGNvbmYgY29uZmlnLkNvbmZpZ3VyYXRpb24pIHsKCglrZXlzIDo9IGNvbmYuS2V5cygpCgoJaWYgbGVuKGtleXMpID09IDAgewoJCXJldHVybgoJfQoKCW9iakNvdW50IDo9IDAKCWZvciBfLCBrZXkgOj0gcmFuZ2Uga2V5cyB7CgkJaWYgY29uZi5Jc09iamVjdChrZXkpIHx8IGtleSA9PSAidXNhZ2UiIHsKCQkJb2JqQ291bnQrKwoJCX0KCX0KCgkvLyBDb21tYW5kCglpZiBvYmpDb3VudCAhPSBsZW4oa2V5cykgewoJCSpjbWRzID0gYXBwZW5kKCpjbWRzLAoJCQljbGkuQ29tbWFuZHsKCQkJCU5hbWU6ICBuYW1lLAoJCQkJVXNhZ2U6IGNvbmYuR2V0U3RyaW5nKCJ1c2FnZSIpLAoJCQkJRmxhZ3M6IFtdY2xpLkZsYWd7CgkJCQkJY2xpLlN0cmluZ1NsaWNlRmxhZ3sKCQkJCQkJTmFtZTogICJkaXNhYmxlLCBkIiwKCQkJCQkJVXNhZ2U6ICJkaXNhYmxlIHN0ZXBzLCBlLmcuOiAtZCBkZXZvcHMuYWxpeXVuLmNzLmNsdXN0ZXIuZGVsZXRlZC53YWl0IC1kIGRldm9wcy5hbGl5dW4uY3MuY2x1c3Rlci5ydW5uaW5nLndhaXQiLAoJCQkJCX0sCgkJCQkJY2xpLlN0cmluZ1NsaWNlRmxhZ3sKCQkJCQkJTmFtZTogICJjb25maWcsIGMiLAoJCQkJCQlVc2FnZTogInVzZSBzcGVjaWZpZWQgY29uZmlnIHRvIGRlZmF1bHQgY29uZmlnIiwKCQkJCQl9LAoJCQkJCWNsaS5TdHJpbmdTbGljZUZsYWd7CgkJCQkJCU5hbWU6ICAiZW52IiwKCQkJCQkJVXNhZ2U6ICJlLmcuOiAtLWVudiBVU0VSOnRlc3QgLS1lbnYgUFdEOmFzZGYiLAoJCQkJCX0sCgkJCQkJY2xpLlN0cmluZ1NsaWNlRmxhZ3sKCQkJCQkJTmFtZTogICJjdHgiLAoJCQkJCQlVc2FnZTogImUuZy46IC0tY3R4IGNvZGU6Z29nYXAgLS1lbnYgaGVsbG86d29ybGQiLAoJCQkJCX0sCgkJCQkJY2xpLlN0cmluZ1NsaWNlRmxhZ3sKCQkJCQkJTmFtZTogICJlbnYtZmlsZSIsCgkJCQkJCVVzYWdlOiAiZS5nLjogLS1lbnYtZmlsZSBhLmpzb24gLS1lbnYtZmlsZSBiLmpzb24iLAoJCQkJCX0sCgkJCQkJY2xpLkJvb2xGbGFnewoJCQkJCQlOYW1lOiAgInF1aWV0LCBxIiwKCQkJCQkJVXNhZ2U6ICJiZSBxdWlldCwgbm8gb3V0cHV0IGRhdGEgcHJpbnQiLAoJCQkJCX0sCgkJCQkJY2xpLlN0cmluZ0ZsYWd7CgkJCQkJCU5hbWU6ICAib3V0cHV0LCBvIiwKCQkJCQkJVXNhZ2U6ICJmaWxlbmFtZSBvdXQgb3V0cHV0IiwKCQkJCQl9LAoJCQkJfSwKCQkJCUFjdGlvbjogbmV3QWN0aW9uKG5hbWUsIGNvbmYpLAoJCQl9LAoJCSkKCgkJcmV0dXJuCgl9CgoJdmFyIHN1YkNvbW1hbmRzIFtdY2xpLkNvbW1hbmQKCglmb3IgXywga2V5IDo9IHJhbmdlIGNvbmYuS2V5cygpIHsKCgkJaWYga2V5ID09ICJ1c2FnZSIgewoJCQljb250aW51ZQoJCX0KCgkJZ2VuZXJhdGVDb21tYW5kcygmc3ViQ29tbWFuZHMsIGtleSwgY29uZi5HZXRDb25maWcoa2V5KSkKCgl9CgoJY3VycmVudENvbW1hbmQgOj0gY2xpLkNvbW1hbmR7CgkJTmFtZTogICAgICAgIG5hbWUsCgkJVXNhZ2U6ICAgICAgIGNvbmYuR2V0U3RyaW5nKCJ1c2FnZSIpLAoJCVN1YmNvbW1hbmRzOiBzdWJDb21tYW5kcywKCX0KCgkqY21kcyA9IGFwcGVuZCgqY21kcywgY3VycmVudENvbW1hbmQpCn0="
)

func main() {
	app := cli.NewApp()

	app.Name = "go-flow"
	app.HelpName = "go-flow"
	app.HideVersion = true

	app.Commands = cli.Commands{
		cli.Command{
			Name:  "build",
			Usage: "build your own flow into binary",
			Flags: []cli.Flag{
				cli.StringFlag{
					Name:  "config",
					Usage: "flow config file",
				},
			},
			Action: build,
		},

		cli.Command{
			Name:  "run",
			Usage: "run flow",
			Flags: []cli.Flag{
				cli.StringFlag{
					Name:  "config",
					Usage: "flow config file",
				},
			},
			Action:          run,
			SkipFlagParsing: true,
			SkipArgReorder:  true,
		},
	}

	app.Flags = []cli.Flag{
		cli.BoolFlag{
			Name:  "verbose, v",
			Usage: "be verbose",
		},
	}

	app.RunAndExitOnError()
}

func createBuilder(appName string, verboseOfGoBuild, verboseOfGoGet bool, conf config.Configuration) (bu *builder.Builder, err error) {

	argsConf := ""

	if verboseOfGoGet {
		argsConf += "go-get = [\"-v\"]\n"
	}

	if verboseOfGoBuild {
		argsConf += "go-build = [\"-v\"]\n"
	}

	buildConfStr := fmt.Sprintf(`%s {
packages = %s
build.args {
    %s
  }
}`, appName, conf.GetStringList("packages"), argsConf)

	goTmpl, err := base64.StdEncoding.DecodeString(flowTempl)
	if err != nil {
		return
	}

	tmpl, err := template.New(appName).Parse(string(goTmpl))
	if err != nil {
		return
	}

	b, err := builder.NewBuilder(
		builder.ConfigString(buildConfStr),
		builder.Template(tmpl),
	)

	if err != nil {
		return
	}

	bu = b
	return
}

func build(ctx *cli.Context) (err error) {

	configFile := ctx.String("config")

	if len(configFile) == 0 {
		err = fmt.Errorf("please input config file")
		return
	}

	conf := config.NewConfig(config.ConfigFile(configFile))

	appName := conf.GetString("app.name", "app")

	verbose := ctx.Parent().Bool("verbose")

	b, err := createBuilder(appName, verbose, verbose, conf)
	if err != nil {
		return
	}

	configData, err := ioutil.ReadFile(configFile)
	if err != nil {
		return
	}

	err = b.Build(map[string]interface{}{"config_str": fmt.Sprintf("`%s`", string(configData))}, appName)

	return
}

func run(ctx *cli.Context) (err error) {

	set := flag.NewFlagSet("run", 0)

	confArg := set.String("config", "", "flow config file")

	err = set.Parse(ctx.Args()[0:2])
	if err != nil {
		return
	}

	configFile := *confArg

	if len(configFile) == 0 {
		err = fmt.Errorf("please input config file")
		return
	}

	conf := config.NewConfig(config.ConfigFile(configFile))

	appName := conf.GetString("app.name", "app")

	verbose := ctx.Parent().Bool("verbose")

	b, err := createBuilder(appName, false, verbose, conf)
	if err != nil {
		return
	}

	configData, err := ioutil.ReadFile(configFile)
	if err != nil {
		return
	}

	err = b.Run(map[string]interface{}{"config_str": fmt.Sprintf("`%s`", string(configData))}, appName, ctx.Args()[2:])

	return
}
